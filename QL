class QLearningPolicy:
    
    def __init__(self, state_size, action_size, learning_rate=0.1, discount_factor=0.9):
        self.q_table = np.zeros((state_size, action_size))
        self.learning_rate = learning_rate
        self.discount_factor = discount_factor

        
    def update_q_value(self, state, action, reward, next_state):
        max_future_q = np.max(self.q_table[next_state])
        current_q = self.q_table[state, action]
        new_q = (1 - self.learning_rate) * current_q + self.learning_rate * (reward + self.discount_factor * max_future_q)
        self.q_table[state, action] = new_q

        
    def choose_action(self, state, epsilon=0.1):
        if np.random.rand() < epsilon:  
            return np.random.randint(self.q_table.shape[1])
        else:  
            return np.argmax(self.q_table[state])
